#ifndef TTNODE_H
#define TTNODE_H
#include "TTNode.h"

template <typename Key, typename E>
class TTTree {
	E findHelp(TTNode<Key, E>* root, Key k) const;
	TTNode<Key, E>* insertHelp(TTNode<Key, E>* rt, const Key k, const E e);
};

template <typename Key, typename E>
E TTTree<Key, E>::findHelp(TTNode<Key, E>* root, Key k) const {
	if (root == NULL)
		return NULL;
	if (k == root->lkey)
		return root->lval;
	if (k == root->rkey)
		return root->rval;
	if (k < root->lkey)
		return findHelp(root->left, k);
	else if (root->rkey == EMPTYKEY)
		return findHelp(root->center, k);
		else if (k < root->rkey)
			return findHelp(root->center, k);
		else
			return findHelp(root->right, k);
}

template <typename Key, typename E>
TTNode<Key, E>* TTTree<Key, E>::insertHelp(TTNode<Key, E>* rt, const Key k, const E e) {
	TTNode<Key, E>* retval;
	if (rt == NULL)
		return new TTNode<Key, E>(k, e, EMPTYKEY, NULL, NULL, NULL, NULL);
	if (rt->ifLeaf())
		return rt->add(new TTNode<Key, E>(k, e, EMPTYKEY, NULL, NULL, NULL, NULL));
	if (k < rt->lkey) {
		retval = insertHelp(rt->left, k, e);
		if (retval == rt->left)
			return rt;
		else
			return rt->add(retval);
	}
	else if ((rt->rkey == EMPTYKEY) || (k < rt->rkey)) {
		retval = insertHelp(rt->center, k, e);
		if (retval == rt->center)
			return rt;
		else
			return rt->add(retval);
	}
	else {
		retval = insertHelp(rt->right, k, e);
		if (retval == rt->right)
			return rt;
		else
			return rt->add(retval);
	}
}
#endif
